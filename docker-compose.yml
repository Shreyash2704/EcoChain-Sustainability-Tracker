# docker-compose.yml
# EcoChain Optimized Docker Compose (Fixes NumPy Issues)


services:
  # ==================== BACKEND SERVICE ====================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecochain-backend
    ports:
      - "8002:8002"
    volumes:
      - ./backend/data:/app/data  # Persist JSON data files
      - backend_logs:/app/logs
    environment:
      - DEV=false
      - DEV_URL=http://backend:8002
      - PROD_URL=https://ecochain-dev.dev
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LIGHTHOUSE_API_KEY=${LIGHTHOUSE_API_KEY}
      - AGENTVERSE_API_KEY=${AGENTVERSE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped
    mem_limit: 1g
    memswap_limit: 1g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - metta-service

  # ==================== AI SERVICES ====================
  metta-service:
    build:
      context: ./metta
      dockerfile: Dockerfile
    container_name: ecochain-metta
    ports:
      - "8007:8007"
    networks:
      - ecochain-network
    restart: unless-stopped
    mem_limit: 1g
    memswap_limit: 1g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== AI AGENTS ====================
  user-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile.agent
    container_name: ecochain-user-agent
    ports:
      - "8005:8005"
    volumes:
      - ./backend/data:/app/data  # Persist JSON data files
    environment:
      - DEV=false
      - DEV_URL=http://backend:8002
      - PROD_URL=https://ecochain-dev.dev
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENTVERSE_API_KEY=${AGENTVERSE_API_KEY}
      - ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped

  reasoner-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile.agent
    container_name: ecochain-reasoner-agent
    ports:
      - "8003:8003"
    volumes:
      - ./backend/data:/app/data  # Persist JSON data files
    environment:
      - DEV=false
      - DEV_URL=http://backend:8002
      - PROD_URL=https://ecochain-dev.dev
      - METTA_SERVICE_URL=http://metta-service:8007
      - ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped
    depends_on:
      - metta-service

  minting-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile.agent
    container_name: ecochain-minting-agent
    ports:
      - "8004:8004"
    volumes:
      - ./backend/data:/app/data  # Persist JSON data files
    environment:
      - DEV=false
      - DEV_URL=http://backend:8002
      - PROD_URL=https://ecochain-dev.dev
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - LIGHTHOUSE_API_KEY=${LIGHTHOUSE_API_KEY}
      - ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped

  analytics-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile.agent
    container_name: ecochain-analytics-agent
    ports:
      - "8006:8006"
    volumes:
      - ./backend/data:/app/data  # Persist JSON data files
    environment:
      - DEV=true
      - DEV_URL=http://backend:8002
      - PROD_URL=https://api.ecochain.app
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped

  # ==================== FRONTEND SERVICE ====================
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: ecochain-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://backend:8002
      - VITE_BLOCKSCOUT_PROXY_URL=http://backend:8002/api/blockscout
      - REACT_APP_API_URL=http://backend:8002
      - REACT_APP_ENVIRONMENT=production
    networks:
      - ecochain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== REVERSE PROXY (NGINX) ====================
  nginx:
    image: nginx:stable-alpine
    container_name: ecochain-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro # For SSL certificates
    networks:
      - ecochain-network
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
      - metta-service
      - user-agent
      - reasoner-agent
      - minting-agent
      - analytics-agent

# ==================== VOLUMES ====================
volumes:
  backend_logs:

# ==================== NETWORKS ====================
networks:
  ecochain-network:
    driver: bridge
